<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--  配置spring的Ioc,把service对象配置进来-->
    <bean id="accountService" class="com.itzjx.service.impl.AccountServiceImpl"></bean>

    <!--  spring中基于XML的AOP配置步骤
        1.把通知的bean也交给spring来管理
        2.使用aop:config标签表明开始AOP的配置
        3.使用aop:aspect标签表明配置切面
            id属性：给切面提供一个唯一标识
            ref属性:指定通知类bean的Id
        4.在aop:aspect标签内部使用对应标签来配置通知的类型。我们的示例是让printLog方法在切入点方法执行之前执行，
        所以是前置通知，用
            aop:before标签：
                method属性：用于指定Logger类中哪个方法是前置通知
                pointcut属性：用于指定切入点表达式，即对业务层哪些方法增强

            切入点表达式写法：
                关键字:execution(表达式)
                标准表达式写法： 访问修饰符 返回值 包名.包名.包名....类名.方法名(参数列表)
                例： public void com.itzjx.service.impl.AccountServiceImpl.saveAccount()
                全通配写法：* *..*.*(..)
            标准>>>>>全通配：
                访问修饰符可以省略
                返回值可以使用通配符，表示任意返回值
                包名可以使用通配符，表示任意包。有几级包就需要写几个*.
                包名可以使用*..表示当前包及其子包
                类名和方法名都可以使用*实现通配
                参数列表：
                    可以直接写数据类型：基本类型直接写名称(int)，引用类型写包名.类名的方式(java.lang.String)
                    可以使用通配符 表示任意类型，但是必须有参数
                    可以使用..表示有无参数均可，有参数可以是任意类型
         实际开发中切入点表达式的通常写法：要切到业务层实现类下的所有方法。例：
         * com.itzjx.service.impl.*.*(..)
    -->

    <!--  配置Logger类  -->
    <bean id="logger" class="com.itzjx.utils.Logger"></bean>

    <!--  配置AOP  -->
    <aop:config>
        <!--配置切面-->
        <aop:aspect id="logAdvice" ref="logger">
            <!--配置通知类型，并且建立通知方法和切入点方法的关联-->
            <aop:before method="pringLog" pointcut="execution(* com.itzjx.service.impl.*.*(..))"></aop:before>
        </aop:aspect>
    </aop:config>
</beans>